==========================
.A16
==========================

.a16

---

(ca65
  (ctrl_cmd
    (a16_ctrl_cmd)))

==========================
.A8
==========================

.a8

---

(ca65
  (ctrl_cmd
    (a8_ctrl_cmd)))

==========================
.ADDR
==========================

.addr $ffff
.addr $ffff, $ffff

---

(ca65
  (ctrl_cmd
    (addr_ctrl_cmd
      (operand_16
        (hex_16))))
  (ctrl_cmd
    (addr_ctrl_cmd
      (operand_16
        (hex_16))
      (operand_16
        (hex_16)))))

==========================
.ALIGN
==========================

.align $ff
.align $ff, $ff

---

(ca65
  (ctrl_cmd
    (align_ctrl_cmd
      (operand_8
        (hex_8))))
  (ctrl_cmd
    (align_ctrl_cmd
      (operand_8
        (hex_8))
        (operand_8
          (hex_8)))))

==========================
.ASCIIZ
==========================

.asciiz "omg"
.asciiz "omg", "omg"

---

(ca65
  (ctrl_cmd
    (asciiz_ctrl_cmd
      (string)))
  (ctrl_cmd
    (asciiz_ctrl_cmd
      (string)
      (string))))

==========================
.ASSERT
==========================

.assert 1 <> 1, warning, "omg"
.assert 1 = 1, error, "foo"
.assert 1 > 1, ldwarning, "bar"
.assert 1 < 1, lderror, "yolo"

---

(ca65
  (ctrl_cmd
    (assert_ctrl_cmd
      (expression
        (neq_cmp
          (expression
            (operand_8
              (dec_8)))
          (expression
            (operand_8
              (dec_8)))))
      (warning_keyword)
      (string)))
  (ctrl_cmd
    (assert_ctrl_cmd
      (expression
        (eq_cmp
          (expression
            (operand_8
              (dec_8)))
          (expression
            (operand_8
              (dec_8)))))
      (error_keyword)
      (string)))
  (ctrl_cmd
    (assert_ctrl_cmd
      (expression
        (gt_cmp
          (expression
            (operand_8
              (dec_8)))
          (expression
            (operand_8
              (dec_8)))))
      (ldwarning_keyword)
      (string)))
  (ctrl_cmd
    (assert_ctrl_cmd
      (expression
        (lt_cmp
          (expression
            (operand_8
              (dec_8)))
          (expression
            (operand_8
              (dec_8)))))
      (lderror_keyword)
      (string))))

==========================
.AUTOIMPORT
==========================

.autoimport +
.autoimport -

---

(ca65
  (ctrl_cmd
    (autoimport_ctrl_cmd
      (plus_symbol)))
  (ctrl_cmd
    (autoimport_ctrl_cmd
      (sub_symbol))))

==========================
.BANKBYTES
==========================

table: .bankbytes table

---

(ca65
  (label)
  (ctrl_cmd
    (bankbytes_ctrl_cmd
      (expression
        (operand_8
          (symbol))))))

==========================
.BYTE/.BYT
==========================

.byte "Hello "
.byt  "world", $0D, $00

---

(ca65
  (ctrl_cmd
    (byte_ctrl_cmd
      (expression
        (string))))
  (ctrl_cmd
    (byte_ctrl_cmd
      (expression
        (string))
      (expression
        (operand_8
          (hex_8)))
      (expression
        (operand_8
          (hex_8))))))

==========================
.CASE
==========================

.case +
.case -

---

(ca65
  (ctrl_cmd
    (case_ctrl_cmd
      (plus_symbol)))
  (ctrl_cmd
    (case_ctrl_cmd
      (sub_symbol))))

==========================
.CHARMAP
==========================

.charmap $41, $61

---

(ca65
  (ctrl_cmd
    (charmap_ctrl_cmd
      (expression
        (operand_8
          (hex_8)))
      (expression
        (operand_8
          (hex_8))))))

==========================
.CODE
==========================

.code

---

(ca65
  (ctrl_cmd
    (code_ctrl_cmd)))

==========================
.CONDES
==========================

.condes symbol, constructor
.condes symbol, destructor
.condes symbol, interruptor
.condes symbol, 3 + 3
.condes symbol, 6, 9000

---

(ca65
  (ctrl_cmd
    (condes_ctrl_cmd
      (symbol)
        (constructor_keyword)))
  (ctrl_cmd
    (condes_ctrl_cmd
      (symbol)
        (destructor_keyword)))
  (ctrl_cmd
    (condes_ctrl_cmd
      (symbol)
        (interruptor_keyword)))
  (ctrl_cmd
    (condes_ctrl_cmd
      (symbol)
        (expression
          (add_exp
            (expression
              (operand_8
                (dec_8)))
            (expression
              (operand_8
                (dec_8)))))))
  (ctrl_cmd
    (condes_ctrl_cmd
      (symbol)
        (expression
          (operand_8
            (dec_8)))
        (expression
          (operand_16
            (dec_16))))))

==========================
.CONSTRUCTOR
==========================

.constructor symbol
.constructor symbol, 16

---

(ca65
  (ctrl_cmd
    (constructor_ctrl_cmd
      (symbol)))
  (ctrl_cmd
    (constructor_ctrl_cmd
      (symbol)
        (expression
          (operand_8
            (dec_8))))))

==========================
.DATA
==========================

.data

---

(ca65
  (ctrl_cmd
    (data_ctrl_cmd)))

==========================
.DBYT
==========================

.dbyt $1234
.dbyt $1234, $4512, $ffff

---

(ca65
  (ctrl_cmd
    (dbyt_ctrl_cmd
      (expression
        (operand_16
          (hex_16)))))
  (ctrl_cmd
    (dbyt_ctrl_cmd
      (expression
        (operand_16
          (hex_16)))
      (expression
        (operand_16
          (hex_16)))
      (expression
        (operand_16
          (hex_16))))))

==========================
.DEBUGINFO
==========================

.debuginfo +
.debuginfo -

---

(ca65
  (ctrl_cmd
    (debuginfo_ctrl_cmd
      (plus_symbol)))
  (ctrl_cmd
    (debuginfo_ctrl_cmd
      (sub_symbol))))

==========================
.DEFINE
==========================

.define VERSION "12.3a"
.define COMBINE(ta, tb, tc) ta+tb*10+tc*100

---

(ca65
  (ctrl_cmd
    (define_ctrl_cmd
      (symbol)
        (expression
          (string))))
  (ctrl_cmd
    (define_ctrl_cmd
      (symbol)
      (symbol)
      (symbol)
      (symbol)
      (expression
        (add_exp
          (expression
            (add_exp
              (expression
                (operand_8
                  (symbol)))
              (expression
                (mult_exp
                  (expression
                    (operand_8
                      (symbol)))
                  (expression
                    (operand_8
                      (dec_8)))))))
          (expression
            (mult_exp
              (expression
                (operand_8
                  (symbol)))
              (expression
                (operand_8
                  (dec_8))))))))))

==========================
.DELMAC/.DELMACRO
==========================

.delmac   macro
.delmacro macro

---

(ca65
  (ctrl_cmd
    (delmac_ctrl_cmd
      (symbol)))
  (ctrl_cmd
    (delmac_ctrl_cmd
      (symbol))))

==========================
.DESTRUCTOR
==========================

.destructor symbol
.destructor symbol, 400+20

---

(ca65
  (ctrl_cmd
    (destructor_ctrl_cmd
      (symbol)))
  (ctrl_cmd
    (destructor_ctrl_cmd
      (symbol)
      (expression
        (add_exp
          (expression
            (operand_16
              (dec_16)))
          (expression
            (operand_8
              (dec_8))))))))

==========================
.DWORD
==========================

.dword $ffff
.dword $ffff, $ffff, $ffff

---

(ca65
  (ctrl_cmd
    (dword_ctrl_cmd
      (expression
        (operand_16
          (hex_16)))))
  (ctrl_cmd
    (dword_ctrl_cmd
      (expression
        (operand_16
          (hex_16)))
      (expression
        (operand_16
          (hex_16)))
      (expression
        (operand_16
          (hex_16))))))

==========================
.ELSE
==========================

.else

---

(ca65
  (ctrl_cmd
    (else_ctrl_cmd)))


==========================
.ELSEIF
==========================

.elseif bar = 1

---

(ca65
  (ctrl_cmd
    (elseif_ctrl_cmd
      (expression
        (eq_cmp
          (expression
            (operand_8
              (symbol)))
          (expression
            (operand_8
              (dec_8))))))))

==========================
.END
==========================

.end

---

(ca65
  (ctrl_cmd
    (end_ctrl_cmd)))

==========================
.ENDIF
==========================

.endif

---

(ca65
  (ctrl_cmd
    (endif_ctrl_cmd)))

==========================
.ENDMAC/.ENDMACRO
==========================

.endmac
.endmacro

---

(ca65
  (ctrl_cmd
    (endmacro_ctrl_cmd))
  (ctrl_cmd
    (endmacro_ctrl_cmd)))

==========================
.ENDREP/.ENDREPEAT
==========================

.endrep
.endrepeat

---

(ca65
  (ctrl_cmd
    (endrepeat_ctrl_cmd))
  (ctrl_cmd
    (endrepeat_ctrl_cmd)))

==========================
.ENDSCOPE
==========================

.endscope

---

(ca65
  (ctrl_cmd
    (endscope_ctrl_cmd)))

==========================
.ENDSTRUCT
==========================

.endstruct

---

(ca65
  (ctrl_cmd
    (endstruct_ctrl_cmd)))

==========================
.ENDUION
==========================

.endunion

---

(ca65
  (ctrl_cmd
    (endunion_ctrl_cmd)))

==========================
.ENUM
==========================

.enum errorcodes
  no_error = -1
  file_error
  parse_error
.endenum

.enum
.endenum

.enum
  eunknown = -1
  eok
  efile
  ebusy
  eagain
  ewouldblock = eagain
.endenum

---

(ca65
  (ctrl_cmd
    (enum_ctrl_cmd
      (enum_name
        (symbol))
      (enum_body
        (enum_member
          (symbol)
          (expression
            (unary_neg_exp
              (expression
                (operand_8
                  (dec_8))))))
        (enum_member
          (symbol))
        (enum_member
          (symbol)))))
  (ctrl_cmd
    (enum_ctrl_cmd))
  (ctrl_cmd
    (enum_ctrl_cmd
      (enum_body
        (enum_member
          (symbol)
          (expression
            (unary_neg_exp
              (expression
                (operand_8
                  (dec_8))))))
        (enum_member
          (symbol))
        (enum_member
          (symbol))
        (enum_member
          (symbol))
        (enum_member
          (symbol))
        (enum_member
          (symbol)
          (expression
            (operand_8
              (symbol))))))))

==========================
.ERROR
==========================

.error "Do a barrel roll!"

---

(ca65
  (ctrl_cmd
    (error_ctrl_cmd
      (string))))

==========================
.EXITMAC/.EXITMACRO
==========================

.exitmac
.exitmacro

---

(ca65
  (ctrl_cmd
    (exitmacro_ctrl_cmd))
  (ctrl_cmd
    (exitmacro_ctrl_cmd)))

==========================
.EXPORT
==========================

.export foo
.export bar: far
.export foobar: far = foo * bar
.export baz := foobar, zap: far = baz - bar

---

(ca65
  (ctrl_cmd
    (export_ctrl_cmd
      (exportee
        (symbol))))
  (ctrl_cmd
    (export_ctrl_cmd
      (exportee
        (label)
        (symbol))))
  (ctrl_cmd
    (export_ctrl_cmd
      (exportee
        (label)
        (symbol)
        (expression
          (mult_exp
            (expression
              (operand_8
                (symbol)))
            (expression
              (operand_8
                (symbol))))))))
  (ctrl_cmd
    (export_ctrl_cmd
      (exportee
        (symbol)
        (expression
          (operand_8
            (symbol))))
      (exportee
        (label)
        (symbol)
        (expression
          (sub_exp
            (expression
              (operand_8
                (symbol)))
            (expression
              (operand_8
                (symbol)))))))))

==========================
.EXPORTZP
==========================

.exportzp foo, bar
.exportzp baz := $02

---

(ca65
  (ctrl_cmd
    (exportzp_ctrl_cmd
      (exportee
        (symbol))
      (exportee
        (symbol))))
  (ctrl_cmd
    (exportzp_ctrl_cmd
      (exportee
        (symbol)
        (expression
          (operand_8
            (hex_8)))))))

