====
.A16
====

.A16

----

(asm
  (ctrl_cmd
    (a16_ctrl_cmd)))

====
.A8
====

.A8

----

(asm
  (ctrl_cmd
    (a8_ctrl_cmd)))

=====
.ADDR
=====

.ADDR $ff
.ADDR $ff, $ff

----

(asm
  (ctrl_cmd
    (addr_ctrl_cmd
      (exp
        (num_32))))
  (ctrl_cmd
    (addr_ctrl_cmd
      (exp
        (num_32))
      (exp
        (num_32)))))

======
.ALIGN
======

.ALIGN $ff
.ALIGN $ff, $ff

----

(asm
  (ctrl_cmd
    (align_ctrl_cmd
      (exp
        (num_32))))
  (ctrl_cmd
    (align_ctrl_cmd
      (exp
        (num_32))
      (exp
        (num_32)))))

======
.ASCIIZ
======

.ASCIIZ "foo", "bar"
.ASCIIZ "foo"

----

(asm
  (ctrl_cmd
    (asciiz_ctrl_cmd
      (str)
      (str)))
  (ctrl_cmd
    (asciiz_ctrl_cmd
      (str))))

=======
.ASSERT
=======

.assert foo = $0a, warning
.assert foo = $0b, error
.assert foo = $0c, ldwarning
.assert foo = $0d, lderror

.assert foo = $0a, warning,   "omg!"
.assert foo = $0b, error,     "lol"
.assert foo = $0c, ldwarning, "brb"
.assert foo = $0d, lderror,   ":/"

---

(asm
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))
      (str)))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))
      (str)))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))
      (str)))
  (ctrl_cmd
    (assert_ctrl_cmd
      (exp
        (eql_op
          (exp
            (symbol))
          (exp
            (num_32))))
      (str))))

========
.FILEOPT
========

.fileopt author,   "babasbot"
.fileopt comment,  "Code stolen from my brother."
.fileopt compiler, "ca65."

---

(asm
  (ctrl_cmd
    (fileopt_ctrl_cmd
      (str)))
  (ctrl_cmd
    (fileopt_ctrl_cmd
      (str)))
  (ctrl_cmd
    (fileopt_ctrl_cmd
      (str))))

============
.FORCEIMPORT
============

.forceimport foo
.forceimport foo, bar

---

(asm
  (ctrl_cmd
    (forceimport_ctrl_cmd
      (symbol)))
  (ctrl_cmd
    (forceimport_ctrl_cmd
      (symbol)
      (symbol))))

=======
.GLOBAL
=======

.global foo
.global foo, bar

---

(asm
  (ctrl_cmd
    (global_ctrl_cmd
      (symbol)))
  (ctrl_cmd
    (global_ctrl_cmd
      (symbol)
      (symbol))))

=========
.GLOBALZP
=========

.globalzp foo
.globalzp foo, bar

---

(asm
  (ctrl_cmd
    (globalzp_ctrl_cmd
      (symbol)))
  (ctrl_cmd
    (globalzp_ctrl_cmd
      (symbol)
      (symbol))))

========
.HIBYTES
========

.hibytes $ffaa
.hibytes $aaff, $abcd, omg

---

(asm
  (ctrl_cmd
    (hibytes_ctrl_cmd
      (exp
        (num_32))))
  (ctrl_cmd
    (hibytes_ctrl_cmd
      (exp
        (num_32))
      (exp
        (num_32))
      (exp
        (symbol)))))

========
.I16
========

.i16

---

(asm
  (ctrl_cmd
    (i16_ctrl_cmd)))

========
.I8
========

.i8

---

(asm
  (ctrl_cmd
    (i8_ctrl_cmd)))

===
.IF
===

.if false
  nop
.elseif also_false
  nop
.else
  nop
.endif

---

(asm
  (ctrl_cmd
    (if_ctrl_cmd
      (exp
        (symbol))
      (inst
        (impl_opc
          (nop_opc)))
      (elseif_ctrl_cmd
        (exp
          (symbol)))
      (inst
        (impl_opc
          (nop_opc)))
      (else_ctrl_cmd)
      (inst
        (impl_opc
          (nop_opc))))))

========
.IFBLANK
========

.ifblank foo
  nop
.elseif bar
  nop
.else
  nop
.endif

---

(asm
  (ctrl_cmd
    (ifblank_ctrl_cmd
      (exp
        (symbol))
      (inst
        (impl_opc
          (nop_opc)))
      (elseif_ctrl_cmd
        (exp
          (symbol)))
      (inst
        (impl_opc
          (nop_opc)))
      (else_ctrl_cmd)
      (inst
        (impl_opc
          (nop_opc))))))

========
.IFCONST
========

.ifconst DEBUG
  nop
.else
  nop
.endif

---

(asm
  (ctrl_cmd
    (ifconst_ctrl_cmd
      (exp
        (symbol))
      (inst
        (impl_opc
          (nop_opc)))
      (else_ctrl_cmd)
      (inst
        (impl_opc
          (nop_opc))))))

======
.IFDEF
======

.ifdef DEBUG
  nop
.else
  nop
.endif

---

(asm
  (ctrl_cmd
    (ifdef_ctrl_cmd
      (exp
        (symbol))
      (inst
        (impl_opc
          (nop_opc)))
      (else_ctrl_cmd)
      (inst
        (impl_opc
          (nop_opc))))))

========
.IFNBLANK
========

.ifnblank foo
  nop
.else
  nop
.endif

---

(asm
  (ctrl_cmd
    (ifnblank_ctrl_cmd
      (exp
        (symbol))
      (inst
        (impl_opc
          (nop_opc)))
      (else_ctrl_cmd)
      (inst
        (impl_opc
          (nop_opc))))))

